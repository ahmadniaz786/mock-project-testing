window.jest_html_reporters_callback__({"numFailedTestSuites":11,"numFailedTests":0,"numPassedTestSuites":0,"numPassedTests":0,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":11,"numTodoTests":0,"numTotalTestSuites":11,"numTotalTests":0,"startTime":1713256813649,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step3/__test__/Step3.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step3/__test__/Step3.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (11:11):\n\n    \u001b[0m \u001b[90m  9 |\u001b[39m         \u001b[90m// Render the components\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 10 |\u001b[39m         render(\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 11 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 12 |\u001b[39m             \u001b[33m<\u001b[39m\u001b[33mStep3\u001b[39m handleNext\u001b[33m=\u001b[39m{()\u001b[33m=>\u001b[39m{}}\u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 13 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 14 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step3/__test__/Step3.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseAsyncArrowFromCallExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1055:10)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:900:27)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/FormHeader/__test__/FormHeader.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/FormHeader/__test__/FormHeader.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (12:7):\n\n    \u001b[0m \u001b[90m 10 |\u001b[39m   test(\u001b[32m\"will render without crashing\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m \u001b[90m 11 |\u001b[39m     render(\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 12 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 13 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mFormHeader\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 14 |\u001b[39m           loading\u001b[33m=\u001b[39m{\u001b[36mfalse\u001b[39m}\u001b[0m\n    \u001b[0m \u001b[90m 15 |\u001b[39m           handleBack\u001b[33m=\u001b[39m{handleBackMock}\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/FormHeader/__test__/FormHeader.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/InputField/__test__/InputField.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/InputField/__test__/InputField.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (16:7):\n\n    \u001b[0m \u001b[90m 14 |\u001b[39m   \u001b[36mconst\u001b[39m renderComponent \u001b[33m=\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m \u001b[90m 15 |\u001b[39m     \u001b[36mreturn\u001b[39m render(\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33mInputField\u001b[39m formik\u001b[33m=\u001b[39m{formikMock} name\u001b[33m=\u001b[39m\u001b[32m\"Test\"\u001b[39m type\u001b[33m=\u001b[39m\u001b[32m\"text\"\u001b[39m label\u001b[33m=\u001b[39m\u001b[32m\"Test\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 17 |\u001b[39m     )\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 18 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 19 |\u001b[39m\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/InputField/__test__/InputField.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseReturnStatement (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1058:28)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:478:21)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step2/__test__/Step2.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step2/__test__/Step2.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (26:7):\n\n    \u001b[0m \u001b[90m 24 |\u001b[39m   beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m \u001b[90m 25 |\u001b[39m     render(\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 27 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mStep2\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 28 |\u001b[39m           handleNext\u001b[33m=\u001b[39m{handleNextMock}\u001b[0m\n    \u001b[0m \u001b[90m 29 |\u001b[39m           loading\u001b[33m=\u001b[39m{\u001b[36mfalse\u001b[39m}\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step2/__test__/Step2.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step1/__test__/Step1.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step1/__test__/Step1.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (26:7):\n\n    \u001b[0m \u001b[90m 24 |\u001b[39m   beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m \u001b[90m 25 |\u001b[39m     render(\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 27 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mStep1\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 28 |\u001b[39m           handleNext\u001b[33m=\u001b[39m{handleNextMock}\u001b[0m\n    \u001b[0m \u001b[90m 29 |\u001b[39m           loading\u001b[33m=\u001b[39m{\u001b[36mfalse\u001b[39m}\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Form/components/Step1/__test__/Step1.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Home/__test__/Home.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Home/__test__/Home.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (15:7):\n\n    \u001b[0m \u001b[90m 13 |\u001b[39m   beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m \u001b[90m 14 |\u001b[39m     render(\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 15 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33mBrowserRouter\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 16 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mDataTable\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 17 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mBrowserRouter\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 18 |\u001b[39m     )\u001b[33m;\u001b[39m\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Home/__test__/Home.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/Checkbox/__test__/Checkbox.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/Checkbox/__test__/Checkbox.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (16:7):\n\n    \u001b[0m \u001b[90m 14 |\u001b[39m   beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m \u001b[90m 15 |\u001b[39m     render(\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33mCheckboxField\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 17 |\u001b[39m         name\u001b[33m=\u001b[39m{\u001b[32m\"Test\"\u001b[39m}\u001b[0m\n    \u001b[0m \u001b[90m 18 |\u001b[39m         label\u001b[33m=\u001b[39m{\u001b[32m\"Test\"\u001b[39m}\u001b[0m\n    \u001b[0m \u001b[90m 19 |\u001b[39m         onChange\u001b[33m=\u001b[39m{handleChange}\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/Checkbox/__test__/Checkbox.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/App.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/App.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (5:10):\n\n    \u001b[0m \u001b[90m 3 |\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 4 |\u001b[39m test(\u001b[32m'renders learn react link'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 5 |\u001b[39m   render(\u001b[33m<\u001b[39m\u001b[33mApp\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m   |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 6 |\u001b[39m   \u001b[90m// const linkElement = screen.getByText(/    /i);\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 7 |\u001b[39m   \u001b[90m// expect(linkElement).toBeInTheDocument();\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 8 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/App.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Dashboard/components/__test__/Chart1.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Dashboard/components/__test__/Chart1.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (40:12):\n\n    \u001b[0m \u001b[90m 38 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 39 |\u001b[39m   beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 40 |\u001b[39m     render(\u001b[33m<\u001b[39m\u001b[33mChart1\u001b[39m options\u001b[33m=\u001b[39m{mockOptions} \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 41 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 42 |\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 43 |\u001b[39m   test(\u001b[32m\"renders without crashing\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/pages/Dashboard/components/__test__/Chart1.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/AutoComplete/__test__/AutoComplete.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/AutoComplete/__test__/AutoComplete.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (14:7):\n\n    \u001b[0m \u001b[90m 12 |\u001b[39m   beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m \u001b[90m 13 |\u001b[39m     render(\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 14 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33mAutoCompleteField\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 15 |\u001b[39m         options\u001b[33m=\u001b[39m{mockOpt}\u001b[0m\n    \u001b[0m \u001b[90m 16 |\u001b[39m         label\u001b[33m=\u001b[39m\u001b[32m\"Autocomplete\"\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 17 |\u001b[39m         onChange\u001b[33m=\u001b[39m{(value) \u001b[33m=>\u001b[39m onSelect(value)}\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/AutoComplete/__test__/AutoComplete.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]},{"numFailingTests":0,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":0,"runtime":0,"slow":false,"start":0},"testFilePath":"/Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/Switches/__test__/SwitchField.test.js","failureMessage":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: /Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/Switches/__test__/SwitchField.test.js: Support for the experimental syntax 'jsx' isn't currently enabled (15:12):\n\n    \u001b[0m \u001b[90m 13 |\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 14 |\u001b[39m   beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 15 |\u001b[39m     render(\u001b[33m<\u001b[39m\u001b[33mSwitchField\u001b[39m formik\u001b[33m=\u001b[39m{formikMock} name\u001b[33m=\u001b[39m\u001b[32m\"info_authenticity\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 16 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 17 |\u001b[39m   test(\u001b[32m\"renders without crashing\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n    \u001b[0m \u001b[90m 18 |\u001b[39m     \u001b[36mconst\u001b[39m switchElement \u001b[33m=\u001b[39m screen\u001b[33m.\u001b[39mgetByRole(\u001b[32m\"checkbox\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n    If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\n    You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n    \tnpx cross-env BABEL_SHOW_CONFIG_FOR=/Users/apple/Desktop/mock-project-testing/testing-practice/src/components/fields/Switches/__test__/SwitchField.test.js <your build command>\n    See https://babeljs.io/docs/configuration#print-effective-configs for more info.\n\n      \u001b[2mat toParseError (\u001b[22mnode_modules/@babel/parser/src/parse-error.ts\u001b[2m:74:19)\u001b[22m\n      \u001b[2mat Parser.raise (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1487:19)\u001b[22m\n      \u001b[2mat Parser.expectOnePlugin (\u001b[22mnode_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1552:18)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1274:16)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n      \u001b[2mat Parser.parseExprListItem (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2735:18)\u001b[22m\n      \u001b[2mat Parser.parseCallExpressionArguments (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1035:14)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:877:29)\u001b[22m\n      \u001b[2mat Parser.parseSubscript (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:766:19)\u001b[22m\n      \u001b[2mat Parser.parseSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:724:19)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:709:17)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat Parser.parseExpressionBase (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:215:23)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:39)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3107:16)\u001b[22m\n      \u001b[2mat Parser.parseExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:206:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:636:23)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:417:17)\u001b[22m\n      \u001b[2mat Parser.parseStatementListItem (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:366:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1386:16)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1359:10)\u001b[22m\n      \u001b[2mat Parser.parseBlock (\u001b[22mnode_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1327:10)\u001b[22m\n      \u001b[2mat Parser.parseFunctionBody (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2572:24)\u001b[22m\n      \u001b[2mat Parser.parseArrowExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2515:10)\u001b[22m\n      \u001b[2mat Parser.parseParenAndDistinguishExpression (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1818:12)\u001b[22m\n      \u001b[2mat Parser.parseExprAtom (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1159:21)\u001b[22m\n      \u001b[2mat Parser.parseExprSubscripts (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:703:23)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:680:21)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:642:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnaryOrPrivate (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:385:14)\u001b[22m\n      \u001b[2mat Parser.parseExprOps (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:397:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeConditional (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:352:23)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:21)\u001b[22m\n      \u001b[2mat callback (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:12)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3112:12)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (\u001b[22mnode_modules/@babel/parser/src/parser/expression.ts\u001b[2m:245:17)\u001b[22m\n","testResults":[]}],"config":{"bail":0,"changedFilesWithAncestor":false,"collectCoverage":false,"collectCoverageFrom":[],"coverageDirectory":"/Users/apple/Desktop/mock-project-testing/testing-practice/coverage","coverageProvider":"babel","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":7,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["/Users/apple/Desktop/mock-project-testing/testing-practice/node_modules/jest-html-reporters/index.js",{"publicPath":"./test-report","filename":"report.html","expand":true}]],"rootDir":"/Users/apple/Desktop/mock-project-testing/testing-practice","runTestsByPath":false,"skipFilter":false,"testFailureExitCode":1,"testPathPattern":"","testSequencer":"/Users/apple/Desktop/mock-project-testing/testing-practice/node_modules/@jest/test-sequencer/build/index.js","updateSnapshot":"new","useStderr":false,"watch":false,"watchAll":false,"watchman":true},"endTime":1713256815320,"_reporterOptions":{"publicPath":"./test-report","filename":"report.html","expand":true,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})